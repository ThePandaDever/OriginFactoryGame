
window "show"
window "dimensions" 1400 800

def newID() (
  local t = ""
  loop 10 (
    local t ++= random(97,122).chr()
  )
  return t
)
def lerp(a,b,t) (
  return b - a * t + a
)

def scene_clear() (
  scene = {"entities":{}}
)
def scene_load(scene) (
  scene_clear()
  scene_loadInto(scene)
)
def scene_loadInto(scene) (
  if scene.type == "string" (
    if ScenePresets.getKeys().contains(scene) (
      local s = ScenePresets[scene]
      s()
    ) else (
      error "unknown scene" + scene
    )
  )
)

def draw_entity(entId) (
  draw_entity_raw(scene["entities"][entId])
)
def draw_entity_raw(ent) (
  if Entities.getKeys().contains(ent["type"]) (
    draw = Entities[ent["type"]]["draw"]
    draw(ent)
  )
)
def draw_scene(scene) (
  if scene == null (
    return
  )
  each entId scene["entities"].getKeys() (
    draw_entity(entId)
  )
)
def draw_icon(icn, scale, position) (
  local position ??= [0,0]
  local position = utils.translate(position)
  goto position[1] position[2]
  icon icn scale * .05 * position[3]
)

def update_scene() (
  each entId scene["entities"].getKeys() (
    local ent = scene["entities"][entId]
    if Entities.getKeys().contains(ent["type"]) (
      update = Entities[ent["type"]]["update"]
      if update != null (
        update(entId)
      )
    )
  )
)

console_data = []
console = {
  open: false,
  t: 0,
  
  send: def(a,b,c,d,e,f,type) -> (
    temp = []
    if a != null (; temp.append(a); )
    if b != null (; temp.append(b); )
    if c != null (; temp.append(c); )
    if d != null (; temp.append(d); )
    if e != null (; temp.append(e); )
    if f != null (; temp.append(f); )
    console_data.append([temp.join(" "),type])
  ),
  log: def(a,b,c,d,e,f) -> (
    console.send(a,b,c,d,e,f,"log")
  ),
  warn: def(a,b,c,d,e,f) -> (
    console.send(a,b,c,d,e,f,"warn")
  ),
  error: def(a,b,c,d,e,f) -> (
    console.send(a,b,c,d,e,f,"error")
  ),
  
  update: def() -> (
    if Input.get_key_down("console") (
      console.open = console.open.not
      log "hi"
    )
  ),
  draw: def() -> (
    console.t += (console.open ? 1 0) - console.t * delta_time * 30
    
    local width = 300
    local textSize = 10
    loc -2 9999 lerp(width * .5 + 15, width * -.5 - 15, console.t) -20
    square width window.height - 75 15 : c#222
    
    if x_position - (width / 2) - 8 < window.right (
      frame x_position - (width / 2) - 10 window.top - 50 x_position + (width / 2) + 10 window.bottom + 10 (
        local y = frame.top - 1
        local over = 0
        each msg console_data (
          local copyText = msg[1]
          msg[1] = msg[1].wrapText(width / textSize - 4)
          y -= msg[1].split(newline).len - 1 * textSize * 2.3 * .5 + 25
          goto 0 y
          square width - 10 msg[1].split(newline).len * textSize * 2.3 15 : c#333
          if mouse_touching (
            cursor "pointer"
            if onclick (
              clipboard "set" copyText
            )
          )
          change_y msg[1].split(newline).len - 1 * textSize * 2.3 * .5
          change_x width * -.5 + 15
          local icn = {
            "log": "w 18 c #fff dot 0 0 w 3 line 0 -5 8 -8 line 5 0 8 -8 dot 6 -6 w 4 c #000 line 0 5 0 0 dot 0 -5",
            "warn": "w 5 c #ffa600 line -8 -8 0 8 cont 8 -8 cont -8 -8 w 11 dot 0 -2 w 5 c #000 line 0 5 0 0 dot 0 -6",
            "error": "c #ff2a00 w 3 line -3 8 3 8 cont 8 3 cont 8 -3 cont 3 -8 cont -3 -8 cont -8 -3 cont -8 3 cont -3 8 w 17 dot 0 0 c #000 w 4 dot 0 -6 line 0 6 0 0",
          }
          local icn = icn[msg[2]]
          icon icn 1
          change_x 20
          text msg[1] textSize : c#fff
          y -= msg[1].split(newline).len - 1 * textSize * 2.3 * .5 + 20
          if y + 10 < frame.bottom (
            over ++
          )
        )
        loop over (
          shifted = console_data.shift()
        )
      )
    )
  ),
}

Entity = {
  new: def(data) -> (
    if scene == null (
      error "cannot create entity while scene is null"
    )
    local data ??= {}
    data["position"] ??= [0,0]
    data["type"] ??= "unknown"
    data["scale"] ??= 1
    local id = newID()
    scene["entities"][id] = data
    return id
  ),
  get: def(id) -> (
    if scene == null (
      error "cannot get entity while scene is null"
    )
    return scene["entities"][id]
  ),
  set: def(id, data) -> (
    if scene == null (
      error "cannot set entity while scene is null"
    )
    scene["entities"][id] = data
  ),
}

Utils = {
  translate: def(position, cam) -> (
    local cam ??= main_camera
    local cam = Entity.get(cam)
    return [
      position[1] - cam.position[1] * cam.scale,
      position[2] - cam.position[2] * cam.scale,
      cam.scale
    ]
  ),
  unTranslate: def(position, cam) -> (
    local cam ??= main_camera
    local cam = Entity.get(cam)
    return [
      position[1] / cam.scale + cam.position[1],
      position[2] / cam.scale + cam.position[2]
    ]
  ),
}

Input = {
  bindings: {},
  axes: {},
  
  get_key_raw: def(key) -> (
    local v = key.pressed
    switch key (
      case "mouse left"
        v = mouse_left
        break
      case "mouse middle"
        v = mouse_middle
        break
      case "mouse right"
        v = mouse_right
        break
    )
    return v
  ),
  get_key: def(key) -> (
    return Input.get_key_raw(Input.bindings[key])
  ),
  get_key_down: def(key) -> (
    return Input.get_key(key) and Input.lastPressed[key].not
  ),
  get_axis: def(axis) -> (
    local axis = Input.axes[this.axis]
    return Input.get_key(axis[2]) - Input.get_key(axis[1])
  ),
  
  clear: def() -> (
    Input.bindings = {}
    Input.axes = {}
  ),
  load: def() -> (
    Input.clear()
    
    Input.bind_key("left", "a")
    Input.bind_key("right", "d")
    Input.bind_key("down", "s")
    Input.bind_key("up", "w")
    
    Input.bind_key("place", "mouse left")
    Input.bind_key("eyedrop", "mouse middle")
    Input.bind_key("destroy", "mouse right")
    
    Input.bind_key("console", "`")
    
    Input.bind_axis("horizontal", "left", "right")
    Input.bind_axis("vertical", "down", "up")
  ),
  bind_key: def(binding, key) -> (
    Input.bindings[binding] = key
  ),
  bind_axis: def(axis, negative, positive) -> (
    Input.axes[axis] = [negative, positive]
  ),
  update: def() -> (
    Input.lastPressed = Input.currentPressed
    each key Input.bindings.getKeys() (
      Input.currentPressed[key] = Input.get_key(key)
    )
  ),
  
  currentPressed: {}
}

Vec = {
  add: def(a,b) -> (
    a = Vec.toVec(a)
    b = Vec.toVec(b)
    return [a[1] + b[1],a[2] + b[2]]
  ),
  sub: def(a,b) -> (
    a = Vec.toVec(a)
    b = Vec.toVec(b)
    return [a[1] - b[1],a[2] - b[2]]
  ),
  mul: def(a,b) -> (
    a = Vec.toVec(a)
    b = Vec.toVec(b)
    return [a[1] * b[1],a[2] * b[2]]
  ),
  div: def(a,b) -> (
    a = Vec.toVec(a)
    b = Vec.toVec(b)
    if b[1] == 0 (
      b[1] = 99999999
    )
    if b[2] == 0 (
      b[2] = 99999999
    )
    return [a[1] / b[1],a[2] / b[2]]
  ),
  lerp: def(a,b,t) -> (
    a = Vec.toVec(a)
    b = Vec.toVec(b)
    return [b[1] - a[1] * t + a[1],b[2] - a[2] * t + a[2]]
  ),
  mag: def(v) -> (
    return ((v[1] ^ 2) + (v[2] ^ 2)).sqrt()
  ),
  normalize: def(v) -> (
    return Vec.div(v,Vec.mag(v))
  ),
  roundVec: def(v) -> (
    return [v[1].round(),v[2].round()]
  ),
  toVec: def(v) -> (
    if v.type == "number" (
      v = [v,v]
    )
    return v
  )
}

Entities = {
  player: {
    update: def(id) -> (
      local ent = Entity.get(id)
      ent["position"][1] += Input.get_axis("horizontal") * delta_time * 10
      ent["position"][2] += Input.get_axis("vertical") * delta_time * 10
      Entity.set(id, ent)
      
      local cam = Entity.get(main_camera)
      cam.position = Vec.lerp(cam.position, ent.position, delta_time * 10)
      Entity.set(main_camera, cam)
    ),
    draw: def(ent) -> (
      draw_icon("c #fff w 20 dot 0 0", 1, ent.position)
    ),
  },
  buildingHandler: {
    update: def(id) -> (
    ),
    draw: def() -> (
      draw_icon("c#fff w 1 square 0 0 10 10", 1, Vec.roundVec(Utils.unTranslate([mouse_x,mouse_y])))
    ),
  },
  gameHandler: {
    draw: def() -> (
      UI.hotbar.main()
    ),
  },
}

UI = {
  hotbar: {    
    main: def() -> (
      local hotbar_length = UI.hotbar.items.len * 62.5 - 32.5
      loc 9999 -2 0 40
      square hotbar_length 30 40 : c#222
      local items = []
      each i item items (
        UI.hotbar.slot(i, item)
      )
    ),
    slot: def(i, item) -> (
      loc 9999 -2 i - .5 - (UI.hotbar.items.len * .5) * 62.5 40
      square 30 30 27 : c#444
      text item 10 : c#fff
    ),
  },
}

ScenePresets = {
  base: def() -> (
    player = Entity.new({
      type: "player",
      player: "client",
      inventory: Inventory.add(
        Inventory.new(),
        ItemStack.new("test1",5)
      )
    })
    buildingHandler = Entity.new({
      type: "buildingHandler"
    })
    gameHandler = Entity.new({
      type: "gameHandler"
    })
  ),
  dev: def() -> (
    scene_loadInto("base")
    main_camera = Entity.new({
      type: "camera",
      scale: 30
    })
  ),
}

Items = {
  list: {},
  
  new: def(id, name, desc, stackSize) -> (
    local stackSize ??= 128
    Items.list[id] = {
      name: name,
      desc: desc,
      stackSize: stackSize
    }
  ),
  
  register: def() -> (
    Items.new("test1","Test Item", "silly test item :3")
    Items.new("test2","Test Item but cooler", "cooler test item")
  ),
}

ItemStack = {
  new: def(id, amount) -> (
    return {
      id: id,
      amount: amount
    }
  ),
}

Inventory = {
  new: def(slots) -> (
    local slots ??= 1
    return {
      slots: 1.newArray().fill(ItemStack.new(null, 0))
    }
  ),
  add: def(inventory, itemStack) -> (
    
  )
}

Resources = {
  items: {
    test: "c #f00 w 5 square 0 0 4 4",
    test2: "c #0f0 w 5 square 0 0 4 4",
  }
}

scene = null
main_camera = null

Input.load()
Items.register()

scene_load("dev")
mainloop:
  Input.update()
  
  update_scene()
  draw_scene(scene)
  
  console.update()
  console.draw()